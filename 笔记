1. 数据库的持久化:
 持久化(persistence): 把数据保存到可掉电式存储设备中以供之后使用

2. JDBC的理解:(Java Database Connectivity)
  sun公司提供的一套API,使用这套API可以实现对具体数据库的操作(获取连接,关闭连接,DML,DDL,DCL)

3.JDBC好处:
  面向应用的API: Java API, 抽象接口,供应用程序开发人员使用(连接数据库,执行SQL语句,获得结果)
  面向数据库的API: Java Driver API, 供开发商开发数据库驱动程序用

 从开发程序员的角度: 不需要关注具体的数据库的细节
 数据库厂商: 只需要提供标准的具体实现

4. 数据库驱动:
  不同的数据库厂商针对于JDBC这套接口,提供的具体的实现类的集合

5. 面向接口编程的思想:
   sun公司提供的一套用于数据库操作的接口,Java程序员只需要面向这套接口编程即可;
   不同的数据库厂商,需要针对这套接口,提供不同实现; 不同的实现的集合,即为不同数据库的驱动;

 一: 数据库的连接
     jdbc1 -> ConnectionTest -> 方式五 或 Util -> JDBCUtils;  其中的配置文件: jdbc.properties: 此配置文件声明在工程的src下
           #获取4个基本配置文件
           user=root
           password=sy123456
           url=jdbc:mysql://localhost:3306/test01?rewriteBatchedStatements=true
           driverClass=com.mysql.jdbc.Driver

         /*
         获取数据库的连接
          */
         public static Connection getConnection() throws Exception{
             //1.读取配置文件中4个基本信息
             //系统类加载器
             InputStream is = ClassLoader.getSystemClassLoader().getResourceAsStream("jdbc.properties");

             Properties pros = new Properties();

             pros.load(is);

             String user = pros.getProperty("user");
             String password = pros.getProperty("password");
             String url = pros.getProperty("url");
             String driverClass = pros.getProperty("driverClass");

             //2..加载驱动
             Class.forName(driverClass);

             //3. 获取连接
             Connection connection = DriverManager.getConnection(url, user, password);

             return connection;
         }

6. Statement的弊端:
   问题一: 存在拼串操作,繁琐
    Scanner sc = new Scanner();
    String name = sc.next();
    ......
     String sql = "insert into student(name,birth,grade)values('" + name + "','...','...')"

   问题二: 存在SQL注入问题
     select user,password from user_table where user = '1' or 'and password = '1 or '1' = '1';

   其他问题
    Statement不能操作Blob类型的变量

    Statement在执行批量插入时,效率较低

二. PreparedStatement
 1. PreparedStatement的理解:
   ①: PreparedStatement 是 Statement的子接口

   ②: An object than represents a precompiled SQL statement;(一个对象表示预编译的 SQL 语句)

   ③: 可以解决Statement的sql注入问题,拼串问题

 2. 使用PreparedStatement实现通用的增,删,改方法: version 1.0

        //sql中占位符的个数与可变形参的长度相同
        public static void update(String sql,Object ...args) {//不确定占位符个数和数据类型; 使用Object类型的可变形参代替
            Connection connection = null;
            PreparedStatement ps = null;
            try {
                //1. 获取数据库的连接
                connection = JDBCUtils.getConnection();

                //2. 预编译sql语句, 返回PreparedStatement的实例
                ps = connection.prepareStatement(sql);

                //3. 填充占位符
                for (int i = 0; i < args.length; i++) {
                    ps.setObject(i + 1,args[i]);//小心参数声明错误
                }

                //4. 执行
                ps.execute();
            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                //5. 关闭资源
                JDBCUtils.closeResource(connection,ps);
            }
        }

 3. 使用PreparedStatement实现通用的查询操作: version 1.0
       /**
        * @Description 针对于不同的表的通用查询操作,返回表中的多条记录
        * @param clazz
        * @param sql
        * @param args
        * @param <T>
        * @return
        */
       public <T> List<T> getForList(Class<T> clazz, String sql, Object ... args){
           Connection connection = null;
           PreparedStatement ps = null;
           ResultSet rs = null;
           try {
               connection = JDBCUtils.getConnection();

               ps = connection.prepareStatement(sql);

               for (int i = 0; i < args.length; i++) {
                   ps.setObject(i + 1 ,args[i]);
               }

               rs = ps.executeQuery();
               //获取结果集的元数据
               ResultSetMetaData rsmd = rs.getMetaData();
               //通过ResultSetMetaData获取结果集中的列数
               int columnCount = rsmd.getColumnCount();

               //创建集合对象
               ArrayList<T> list = new ArrayList<>();

               while (rs.next()){
                   T t = clazz.getDeclaredConstructor().newInstance();
                   //处理一行结果集一行数据中的每一个列: 给t对象指定的属性赋值
                   for (int i = 0; i < columnCount; i++) {
                       Object columnValue = rs.getObject(i + 1);

                       //获取每个类的类名
                       String columnLabel = rsmd.getColumnLabel(i + 1);

                       //给t这个对象指定的columnName属性,赋值为columnValue: 通过反射
                       Field field =  clazz.getDeclaredField(columnLabel);
                       field.setAccessible(true);
                       field.set(t,columnValue);

                   }
                   list.add(t);
               }
               return list;

           } catch (Exception e) {
               e.printStackTrace();
           } finally {
               JDBCUtils.closeResource(connection,ps,rs);
           }
           return null;
       }
  总结: 两种思想:
    面向接口编程思想:

    ORM编程思想: (object relational mapping)
     一个数据表对应一个Java类
     表中的一条记录对应Java类的一个对象
     表中的一个字段对应java类中的一个属性

        两种技术:
     1.使用结果集的元数据: ResultSetMetaData
        > getColumnCount(): 获取列数
        > getColumnLabel(): 获取列的别名
             > 说明: 如果sql中没有给字段起别名,getColumnLabel()仍然可以获取到列名




     2. 反射的使用:
        ①: 创建对应的运行时类的对象
        ②: 在运行时,动态的调用指定的运行时类的属性,方法

 4.使用PreparedStatement可以操作Blob类型的变量

   写入操作的方法: setBlob(InputStream is)

   读取操作的方法:
   Blob blob = getBlob(int index)
   InputStream is = blob.getBinaryStream();

   具体的insert:

          //向数据表examstudent表中插入Blob类型的字段
          @Test
          public void testInsert() {
              Connection coon = null;
              PreparedStatement ps = null;
              FileInputStream fis = null;
              try {
                  coon = JDBCUtils.getConnection();

                  String sql = "insert into student(name,grade,img) values(?,?,?)";
                  ps = coon.prepareStatement(sql);

                  /*
                  ps.setObject(1, "代广");
                  ps.setObject(2, 80);

                  fis = new FileInputStream("img.png");
                  ps.setBlob(3, fis);
                   */
                  ps.setObject(1, "邓林");
                  ps.setObject(2, 90);

                  fis = new FileInputStream("英雄.png");
                  ps.setBlob(3, fis);

                  ps.execute();
              } catch (Exception e) {
                  e.printStackTrace();
              } finally {
                  JDBCUtils.closeResource(coon, ps);
                  try {
                      if (fis != null)
                          fis.close();
                  } catch (IOException e) {
                      e.printStackTrace();
                  }
              }
          }

   具体的query:

            //查询数据student表中的Blob类型的字段
              @Test
              public void testQuery() {
                  Connection coon = null;
                  PreparedStatement ps = null;
                  ResultSet rs = null;
                  InputStream is = null;
                  FileOutputStream fos = null;
                  try {
                      coon = JDBCUtils.getConnection();

                      String sql = "select id,name,grade,img from student where id=?";
                      ps = coon.prepareStatement(sql);

                      ps.setObject(1, 7);

                      rs = ps.executeQuery();

                      if (rs.next()) {
                          //方式一:
                          //            int id = rs.getInt(1);
                          //            String name = rs.getString(2);
                          //            int grade = rs.getInt(3);

                          //方式二:
                          int id = rs.getInt("id");
                          String name = rs.getString("name");
                          int grade = rs.getInt("grade");

                          Student stu = new Student(id, name, grade);
                          System.out.println(stu);

                          //将Blob类型的字段下载下来,以文件的形式存储到本地
                          Blob img = rs.getBlob("img");

                          is = img.getBinaryStream();
                          fos = new FileOutputStream("img1.jpg");

                          byte[] buffer = new byte[1024];
                          int len;
                          while ((len = is.read(buffer)) != -1) {
                              fos.write(buffer, 0, len);
                              fos.flush();
                          }
                      }
                  } catch (Exception e) {
                      e.printStackTrace();
                  } finally {
                      try {
                          if (is != null) {
                              is.close();
                          }
                      } catch (IOException e) {
                          e.printStackTrace();
                      }
                      try {
                          if (fos != null) {
                              fos.close();
                          }
                      } catch (IOException e) {
                          e.printStackTrace();
                      }
                      JDBCUtils.closeResource(coon, ps, rs);
                  }
              }

   注意:默认图片大小为4M ;图片超过4M情况: -> C:\ProgramData\MySQL\MySQL Server 5.7 -> 修改my.ini文件274行为16M,重启MySQL服务


三: 测试PreparedStatement实现批量操作: jdbc1 -> blob -> InsertTest

  层次一: 使用Statement实现
         * Connection coon = JDBCUtils.getConnection();
         * Statement st = coon.createStatement();
         * for(int i= 1;i<= 20000;i++){
         *    String sql = "insert into goods(name)values('name_'"+ i +")"//每次运行的sql都不一样
         *    st.execute(sql);
         * }

  层次二: 使用PreparedStatement 替换 Statement

  层次三:1. addBatch() / executeBatch() / clearBatch()
        2. mysql服务器是关闭批处理的,我们需要通过一个参数,让mysql开启批处理的支持;
            ?rewriteBatchedStatements=true 写在配置文件的url后面
        3. 使用更新的mysql 驱动: mysql-connector-java-5.1.37-bin.jar

  层次四: 设置链接为不允许自动提交

    最终代码:

           @Test
           public void testInsert3() {
               Connection coon = null;
               PreparedStatement ps = null;
               try {
                   long start = System.currentTimeMillis();

                   coon = JDBCUtils.getConnection();

                   //设置不允许自动提交数据
                   coon.setAutoCommit(false);

                   String sql = "insert into goods(name)values(?)";//预编译sql语句,只运行一次
                   ps = coon.prepareStatement(sql);

                   for (int i = 1; i <= 200000; i++) {
                       ps.setObject(1, "name_" + i);

                       // 1. '攒' sql
                       ps.addBatch();

                       if (i % 500 == 0) {
                           //2. 执行batch
                           ps.executeBatch();

                           //3. 清空batch
                           ps.clearBatch();
                       }
                   }

                   //统一提交数据
                   coon.commit();

                   long end = System.currentTimeMillis();
                   System.out.println(end - start);//200000: 1307
               } catch (Exception e) {
                   e.printStackTrace();
               } finally {
                   JDBCUtils.closeResource(coon, ps);
               }

           }

总结: PreparedStatement 于 Statement 的异同?
   1. 指出二者的关系; 接口 与 子接口
   2. 开发中 PreparedStatement 替换Statement
   3. PreparedStatement能预编译sql语句;防止sql注入



****************************************************************************************************



数据库事务:
    1. 事务: jdbc2 -> transaction -> TransactionTest
        一组逻辑操作单元,是数据从一种状态变换到另一种状态;
           一组逻辑操作单元,一个或多个DML操作;

    2. 事务处理原则:
        保证所有事务都作为一个工作单元来执行,即便出现了故障,都不能改变这种执行方式
           当在一个事务中执行多个操作时:
               要么所有的事务都被提交(commit),那么这些被修改就永久的保存下来;
               要么数据库管理系统将放弃所作的所有修改,整个事务回滚(rollback)到最初的状态

    3. 代码体现:

         @Test
            public void testUpdateWithTx() {
                Connection coon = null;
                try {
                    coon = JDBCUtils.getConnection();
                    System.out.println(coon.getAutoCommit());//true

                    //设置取消数据自动提交功能
                    coon.setAutoCommit(false);

                    String sql1 = "update user_table set balance = balance - 100 where user = ?";
                    update(coon, sql1, "邓林");


                    //模拟网络异常
                    System.out.println(10 / 0);

                    String sql2 = "update user_table set balance = balance + 100 where user = ?";
                    update(coon, sql2, "代广");

                    System.out.println("转账成功");

                    //上面操作成功了,再提交数据
                    coon.commit();

                } catch (Exception e) {
                    e.printStackTrace();
                    //回滚数据
                    try {
                        coon.rollback();
                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                } finally {

                    //修改其为自动提交数据
                    // 主要针对域使用数据库连接池的使用
                    try {
                        coon.setAutoCommit(true);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    JDBCUtils.closeResource(coon, null);
                }

            }
    4.  通用的增删改操作 --- version 2.0(考虑上事务)
           public static int update(Connection conn, String sql, Object... args) {

               //通用的增删改操作
               PreparedStatement ps = null;
               try {
                   //1. 预编译sql语句.返回PreparedStatement的实例
                   ps = conn.prepareStatement(sql);

                   //2. 填充占位符
                   for (int i = 0; i < args.length; i++) {
                       ps.setObject(i + 1, args[i]);
                   }

                   //3. 执行
                   /*
                   ps.execute():
                     如果执行的是查询操作,有返回结果,则此方法返回true
                     如果执行的是增删改操作,没有返回结果.则此方法返回false
                    */
                   //方式一
       //           return ps.execute();

                   //方式二
                   return ps.executeUpdate();

               } catch (Exception e) {
                   e.printStackTrace();
               } finally {
                   //4. 资源的关闭
                   JDBCUtils.closeResource(null, ps);
               }
               return 0;
           }

    5.  通用的查询操作, 用于返回数据表的一条记录; (version 2.0 考虑上事务)
           public <T> T getInstance(Connection conn, Class<T> clazz, String sql, Object... args) {
               PreparedStatement ps = null;
               ResultSet rs = null;
               try {

                   ps = conn.prepareStatement(sql);

                   for (int i = 0; i < args.length; i++) {
                       ps.setObject(i + 1, args[i]);
                   }

                   rs = ps.executeQuery();

                   //获取结果集的元数据
                   ResultSetMetaData rsmd = rs.getMetaData();
                   //通过ResultSetMetaData获取结果集中的列数
                   int columnCount = rsmd.getColumnCount();//getColumnCount():获取列数

                   if (rs.next()) {
                       T t = clazz.getDeclaredConstructor().newInstance();
                       //处理一行结果集一行数据中的每一个列
                       for (int i = 0; i < columnCount; i++) {
                           Object columnValue = rs.getObject(i + 1);

                           //获取每个类的类名
                           String columnLabel = rsmd.getColumnLabel(i + 1);//getColumnLabel():获取列标签

                           //给t这个对象指定的columnName属性,赋值为columnValue: 通过反射
                           Field field = clazz.getDeclaredField(columnLabel);//getDeclaredField():获取声明字段
                           field.setAccessible(true);
                           field.set(t, columnValue);

                       }
                       return t;
                   }
               } catch (Exception e) {
                   e.printStackTrace();
               } finally {
                   JDBCUtils.closeResource(null, ps, rs);
               }
               return null;
           }

   6. 事务的四大(ACID)属性
     ①: 原子性(Atomicity): 事务时不可分割的工作单位
     ②: 一致性(Consistency): 从一个一致性状态变换到另外一个一致性状态
     ③: 隔离性(Isolation): 各个事务之间不互相干扰
     ④: 持久性(Durability): 事务一旦提交,对数据库中数据的改变时永久性的;后续的操作和数据库故障不应该对其造成影响

   7. 数据操作过程中可能出现的问题: 针对于隔离性
      脏读: 对于两个事务T1,T2, T1读取了已经被T2更新但还没有被提交的字段; 之后,若T2回滚,T1读取的内容就是临时且无效的

      不可重复读: 对于两个事务T1,T2, T1读取了一个字段,然后T2更新了该字段; 之后,T1再次读取同一个字段,值就不同了

      幻读: 对于两个事务T1,T2, T1从表中读取了一个字段,然后T2在该表中插入了一些新的行; 之后,如果T1再次读取同一个表,就会多出几行

   8. 四种隔离级别: (一致性和并发性: 一致性越好,并发性越差)
      READ UNCOMMITTED(读未提交数据): 都会出现

      READ COMMITTED(读已提交数据): 避免脏读

      REPEATABLE READ(可重复读): 避免脏读和不可重复读; mysql默认事务隔离级别

      SERIALIZABLE(串行化): 所有问题都可避免,但性能十分低下

   9. 如何查看并设置隔离级别:
      查看当前隔离级别:
         select @@tx_isolation;

      设置当前MySQL连接的隔离级别:
         set transaction isolation level read committed;

      设置数据库系统的全局的隔离级别:
         set global transaction isolation level read committed;


**************************************************************************************

DAO: --> jdbc2 -> DAO -> 所有内容


  总结:
    1. 获取数据库的连接:

     Connection conn = JDBCUtils.getConnection();//方式一: 手动获取连接;  //方式二: 数据库连接池

     conn.setAutoCommit(false);     //体现事务

    2. 如下的多个DML操作,作为一个事务出现:

      操作一: 需要使用通用的增删改查操作   // 通用的增删改查操作如何实现?

      操作二: 需要使用通用的增删改查操作   //方式一: 手动使用PreparedStatement实现

      操作三: 需要使用通用的增删改查操作   //方式二: 使用dbutils.jar中的QueryRunner类

    提交:
     conn.commit();

    3. 如果出现异常,则:
     conn.rollback();

    4.资源关闭
     JDBCUtils.closeResource(..,..,..,);  //方式一: 手动关闭资源;  //方式二: DbUtils类的关闭方法


  *********************************************************************

 数据库连接池:

  1. 解决传统开发中给的数据库连接问题: 使用数据库连接池

  2.使用数据库连接池的好处:
    ①: 资源重用
    ②: 更宽的系统反应速度
    ③: 新的资源分配手段
    ④: 统一的连接管理,避免数据库连接池泄露

    或:
    ①: 提高程序的响应速度(减少了创建连接相应的时间);
    ②: 降低资源的消耗(可以重复使用已经提供好的连接);
    ③: 便于连接的管理

  4. 实现的方式:
    DBCP (快,但不稳定) / C3P0 (稳定,但不太快) / Druid (快,稳定)

    1. 导入jar包

    2. 测试连接的代码: jdbc3 --> Utils --> JDBCUtils -> getConnection1()

          //使用Druid数据库连接池技术
          private static DataSource source1;

          static {
              try {
                  Properties pros = new Properties();

                  InputStream is = ClassLoader.getSystemClassLoader().getResourceAsStream("druid.properties");

                  pros.load(is);

                  source1 = DruidDataSourceFactory.createDataSource(pros);

              } catch (Exception e) {
                  e.printStackTrace();
              }
          }

          public static Connection getConnection1() throws SQLException {
              Connection conn = source1.getConnection();

              return conn;
          }

    3. 配置文件,src下的: druid.properties

        url=jdbc:mysql:///test01
        username=root
        password=sy123456
        driverClassName=com.mysql.jdbc.Driver

        initialSize=10
        maxActive=10



  QueryRunner:
    1.导入jar包

    2. 使用现成的jar中的QueryRunner测试增删改查的操作:

           //测试插入
           @Test
           public void testInsert() {

               Connection conn = null;
               try {
                   QueryRunner runner = new QueryRunner();

                   conn = JDBCUtils.getConnection1();

                   String sql = "insert into student(name,birth,grade)values(?,?,?)";

                   int insertCount = runner.update(conn, sql, "张洋", "2000-06-06", 90);

                   System.out.println(insertCount);
               } catch (Exception e) {
                   e.printStackTrace();
               } finally {
                   JDBCUtils.closeResource(conn, null);
               }
           }


    3. 使用现成的jar中的QueryRunner测试查询操作:

        jdbc3 --> dbutils --> QueryRunnerTest --> //测试查询: 测试5种不同的处理器 后面的全部内容



    4. 使用dbutils.jar包中的DbUtils工具类实现连接等资源的关闭

           // 使用dbutils.jar中提供的Dbutils工具类,实现资源的关闭

           public static void closeResource1(Connection conn, Statement ps, ResultSet rs) {
               //方式一:
       //        try {
       //            DbUtils.close(rs);
       //        } catch (SQLException e) {
       //            e.printStackTrace();
       //        }
       //        try {
       //            DbUtils.close(ps);
       //        } catch (SQLException e) {
       //            e.printStackTrace();
       //        }
       //        try {
       //            DbUtils.close(conn);
       //        } catch (SQLException e) {
       //            e.printStackTrace();
       //        }

               //方式二:
               DbUtils.closeQuietly(rs);
               DbUtils.closeQuietly(ps);
               DbUtils.closeQuietly(conn);
           }



将本地项目或文件提交的GitHub上 -->  Share Project on GitHub


git操作
clone: 拷贝远程仓库
commit: 本地提交
push: 远程提交
pull: 更新到本地





生成javadoc:

   Tools -> Generate JavaDoc --> 选择指定的 project 或者 module

     输入 :
      Locale: 输入语言类型: zh_CN
      Other command line arguments : -encoding UTF-8 -charset UTF-8



本地查看修改的历史记录
  右键要查看的项目或文件 -> Local History -> show History



缓存和索引的清理
   IDEA报各种莫名其妙的错误,或者项目打不开的情况
     可以清理缓存和索引:

       File -> Invalidate Caches/Restart -> Invalidate and Restart

